{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Component, createContext, useContext, useEffect, useState } from \"react\";\nexport var EnvContext = createContext();\nexport var useEnv = function useEnv() {\n  return useContext(EnvContext);\n}; // export const EnvProvider = props => {\n//     const [statusUrl, setStatusUrl] = useState(\"thisshouldshowup\");\n//     useEffect(() => {\n//         if(process.env.NODE_ENV === \"development\") {\n//             setStatusUrl(\"http://localhost:3000\")\n//         } else {\n//             setStatusUrl(\"https://word-processor.now.sh\")\n//         }\n//     }, [])\n//     return (\n//         <EnvContext.Provider value={statusUrl}>\n//             {props.children}\n//         </EnvContext.Provider>\n//     )\n// }\n\nexport var EnvProvider = /*#__PURE__*/function (_Component) {\n  _inherits(EnvProvider, _Component);\n\n  function EnvProvider() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, EnvProvider);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(EnvProvider)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      statusUrl: \"\"\n    });\n\n    return _this;\n  }\n\n  _createClass(EnvProvider, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (false) {\n        this.setState({\n          statusUrl: \"http://localhost:3000\"\n        });\n      } else {\n        this.setState({\n          statusUrl: \"https://word-processor.now.sh\"\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var statusUrl = this.state.statusUrl;\n      return __jsx(EnvContext.Provider, {\n        value: statusUrl\n      }, this.props.children);\n    }\n  }]);\n\n  return EnvProvider;\n}(Component);","map":null,"metadata":{},"sourceType":"module"}
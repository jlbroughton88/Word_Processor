{"ast":null,"code":"var _jsxFileName = \"/Users/JacobBroughton/coding/projects/Word_Processor/pages/comps/contexts/envContext.js\";\nvar __jsx = React.createElement;\nimport React, { createContext, useEffect, useState } from \"react\";\nexport var EnvContext = createContext(); // export const useEnv = useContext(EnvContext);\n\nexport var EnvProvider = function EnvProvider(props) {\n  var _useState = useState(\"\"),\n      statusUrl = _useState[0],\n      setStatusUrl = _useState[1];\n\n  useEffect(function () {\n    if (true) {\n      setStatusUrl(function (prevEnv) {\n        return [prevEnv, \"http://localhost:3000\"];\n      });\n    } else {\n      setStatusUrl(function (prevEnv) {\n        return [prevEnv, \"https://word-processor.now.sh\"];\n      });\n    }\n  }, [statusUrl]);\n  return __jsx(EnvContext.Provider, {\n    value: statusUrl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, console.log(\"This is what the app sees: \" + statusUrl), props.children);\n}; // export class EnvProvider extends Component {\n//     state = {\n//         statusUrl: \"\"\n//     };\n//     componentDidMount() {\n//         if(process.env.NODE_ENV === \"development\") {\n//             this.setState({ statusUrl: \"http://localhost:3000\" })\n//         } else {\n//             this.setState({ statusUrl: \"https://word-processor.now.sh\" })\n//         }\n//     }\n//     render() {\n//         const { statusUrl } = this.state;\n//         return (\n//             <EnvContext.Provider\n//                 value={statusUrl}\n//             >\n//                 {this.props.children}\n//             </EnvContext.Provider>\n//         )\n//     }\n// }","map":{"version":3,"sources":["/Users/JacobBroughton/coding/projects/Word_Processor/pages/comps/contexts/envContext.js"],"names":["React","createContext","useEffect","useState","EnvContext","EnvProvider","props","statusUrl","setStatusUrl","prevEnv","console","log","children"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,SAA/B,EAA0CC,QAA1C,QAA0D,OAA1D;AAEA,OAAO,IAAMC,UAAU,GAAGH,aAAa,EAAhC,C,CAEP;;AAEA,OAAO,IAAMI,WAAW,GAAG,SAAdA,WAAc,CAAAC,KAAK,EAAI;AAAA,kBAEAH,QAAQ,CAAC,EAAD,CAFR;AAAA,MAE3BI,SAF2B;AAAA,MAEhBC,YAFgB;;AAIhCN,EAAAA,SAAS,CAAC,YAAM;AACZ,cAA2C;AACvCM,MAAAA,YAAY,CAAC,UAAAC,OAAO;AAAA,eAAK,CAACA,OAAD,EAAU,uBAAV,CAAL;AAAA,OAAR,CAAZ;AACH,KAFD,MAEO;AACHD,MAAAA,YAAY,CAAC,UAAAC,OAAO;AAAA,eAAK,CAACA,OAAD,EAAU,+BAAV,CAAL;AAAA,OAAR,CAAZ;AACH;AACJ,GANQ,EAMN,CAACF,SAAD,CANM,CAAT;AAQA,SACI,MAAC,UAAD,CAAY,QAAZ;AAAqB,IAAA,KAAK,EAAEA,SAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKG,OAAO,CAACC,GAAR,CAAY,gCAAgCJ,SAA5C,CADL,EAEKD,KAAK,CAACM,QAFX,CADJ;AAMH,CAlBM,C,CAoBP;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { createContext, useEffect, useState } from \"react\";\n\nexport const EnvContext = createContext();\n\n// export const useEnv = useContext(EnvContext);\n\nexport const EnvProvider = props => {\n\n    let [statusUrl, setStatusUrl] = useState(\"\");\n\n    useEffect(() => {\n        if(process.env.NODE_ENV === \"development\") {\n            setStatusUrl(prevEnv => ([prevEnv, \"http://localhost:3000\"]))\n        } else {\n            setStatusUrl(prevEnv => ([prevEnv, \"https://word-processor.now.sh\"]))\n        }\n    }, [statusUrl])\n\n    return (\n        <EnvContext.Provider value={statusUrl}>\n            {console.log(\"This is what the app sees: \" + statusUrl)}\n            {props.children}\n        </EnvContext.Provider>\n    )\n}\n\n// export class EnvProvider extends Component {\n//     state = {\n//         statusUrl: \"\"\n//     };\n\n//     componentDidMount() {\n//         if(process.env.NODE_ENV === \"development\") {\n//             this.setState({ statusUrl: \"http://localhost:3000\" })\n//         } else {\n//             this.setState({ statusUrl: \"https://word-processor.now.sh\" })\n//         }\n//     }\n\n//     render() {\n\n//         const { statusUrl } = this.state;\n\n//         return (\n//             <EnvContext.Provider\n//                 value={statusUrl}\n//             >\n//                 {this.props.children}\n//             </EnvContext.Provider>\n//         )\n//     }\n// } \n\n"]},"metadata":{},"sourceType":"module"}